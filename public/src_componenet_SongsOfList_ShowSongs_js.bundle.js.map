{"version":3,"sources":["webpack://spoty/./src/componenet/SongsOfList/ShowSongs.js"],"names":["ShowSongs","token","params","useParams","id","console","log","songs","useUserPlayListsSongs","listName","name","listImage","images","tracks","songsArray","items","Array","isArray","length","url","map","song","track","album","artists","propTypes","PropTypes","listId","string"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAKA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAC3B;AACA;AACA;AACA,MAAIC,MAAM,GAAGC,2DAAS,EAAtB;AACA,MAAKC,EAAL,GAAWF,MAAX,CAAKE,EAAL;AACAC,SAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,EAAlB;AAEAC,SAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBJ,MAArB;AACAG,SAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBL,KAApB,EAT2B,CAY3B;;AACD;AACH;AACA;;AAEI,MAAMM,KAAK,GAAGC,sEAAqB,CAACP,KAAD,EAAOG,EAAP,CAAnC;AAGAC,SAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBC,KAAzB,EApB2B,CAqB3B;;AACA,MAAYE,QAAZ,GAAiDF,KAAjD,CAAOG,IAAP;AAAA,MAA4BC,SAA5B,GAAiDJ,KAAjD,CAAqBK,MAArB;AAAA,MAAuCC,MAAvC,GAAiDN,KAAjD,CAAuCM,MAAvC;AACA,MAAIC,UAAJ;;AACA,MAAGP,KAAK,IAAIM,MAAZ,EAAmB;AAChB;AACFC,cAAU,GAAGD,MAAM,CAACE,KAApB;AACA;;AAODV,SAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAArB;AACA,SACI;AAACA,SAAK,EAALA;AAAD,OAAWS,KAAK,CAACC,OAAN,CAAcN,SAAd,CAAX,IAAuCA,SAAS,CAACO,MAAV,GAAmB,CAA1D,gBACA,2EACI,2EAAK;AAAK,MAAE,EAAC,YAAR;AAAqB,OAAG,EAAEP,SAAS,CAAC,CAAD,CAAT,CAAaQ,GAAvC;AAA6C,KAAC,EAAC,GAA/C;AAAmD,KAAC,EAAC,GAArD;AAAyD,UAAM,EAAC,OAAhE;AAAwE,uBAAmB,EAAC,gBAA5F;AAA8G,SAAK,EAAC;AAApH,IAAL,CADJ,eAEI,gFAAoBV,QAApB,CAFJ,eAGI,6DAEKO,KAAK,CAACC,OAAN,CAAcH,UAAd,CAAD,GAEQA,UAAU,CAACM,GAAX,CAAgB,UAACC,IAAD,EAAS;AACrB,wBAAO;AAAI,SAAG,EAAEA,IAAI,CAACC,KAAL,CAAWlB;AAApB,oBAAyB;AAAK,SAAG,EAAEiB,IAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBX,MAAjB,CAAwB,CAAxB,EAA2BO;AAArC,MAAzB,EAA0EE,IAAI,CAACC,KAAL,CAAWZ,IAAX,GAAkB,KAAlB,GAA0BW,IAAI,CAACC,KAAL,CAAWE,OAAX,CAAmB,CAAnB,EAAsBd,IAA1H,CAAP;AAEH,GAHD,CAFR,gBAUI,0FAZR,CAHJ,CADA,gBAuBI,2EAxBR;AA2BH,CA9DD;;AA+DAV,SAAS,CAACyB,SAAV,GAAsB;AAClBxB,OAAK,EAAEyB,qEADW;AAElBC,QAAM,EAAED,0DAAgBE;AAFN,CAAtB;AAKA,+DAAe5B,SAAf,E","file":"src_componenet_SongsOfList_ShowSongs_js.bundle.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\r\nimport { useUserPlayListsSongs } from '../../hooks/useQuery'\r\nimport PropTypes from 'prop-types'\r\nimport { ListContext } from '../../hooks/ListContext'\r\nimport { useParams } from \"react-router-dom\";\r\nimport { set } from 'js-cookie';\r\n\r\n\r\n\r\n\r\nconst ShowSongs = ({token}) => {\r\n    //const [selectedList, setSelectedList] = useContext(ListContext)\r\n    //const{selectedList, setSelectedList} = useContext(ListContext);\r\n    //const [songs, setSongs] = useState({name : \"\",images : [], tracks: {}});\r\n    let params = useParams();\r\n    let {id} = params;\r\n    console.log('id', id)\r\n\r\n    console.log('params',params)\r\n    console.log('token',token)\r\n\r\n   \r\n    //setSongs(useUserPlayListsSongs(token,id));\r\n   /* useEffect(()=>{setSongs(useUserPlayListsSongs(token,id));}\r\n    ,[id]\r\n\r\n    )*/\r\n    const songs = useUserPlayListsSongs(token,id)\r\n  \r\n    \r\n    console.log('respuestas',songs)\r\n    //const { items } = songs;\r\n    const {name:listName,images:listImage, tracks} = songs;\r\n    let songsArray;\r\n    if(songs && tracks){\r\n       //console.log('listImage',listImage[0])\r\n     songsArray = tracks.items; \r\n    }\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n    console.log('songs', songs)\r\n    return(\r\n        {songs} && Array.isArray(listImage) && listImage.length > 0 ? (\r\n        <div>\r\n            <div><img id=\"list-image\" src={listImage[0].url}  x=\"0\" y=\"0\" height=\"168px\" preserveAspectRatio=\"xMidYMid slice\"  width=\"168px\" ></img></div>\r\n            <strong>List Name: {listName}</strong>\r\n            <ul>\r\n            {\r\n                (Array.isArray(songsArray)) ? \r\n                (\r\n                        songsArray.map( (song) =>{\r\n                            return(<li key={song.track.id} ><img src={song.track.album.images[2].url}></img>{song.track.name + ' - ' + song.track.artists[0].name }</li>)\r\n\r\n                        }\r\n                        )\r\n                )\r\n                :\r\n                (\r\n                    <strong>The list has not songs</strong>\r\n                )\r\n            }\r\n            </ul>\r\n\r\n        </div>\r\n        ):(\r\n            <div>Empty list</div>\r\n        )\r\n    )\r\n}\r\nShowSongs.propTypes = {\r\n    token: PropTypes.string.isRequired,\r\n    listId: PropTypes.string,\r\n}\r\n\r\nexport default ShowSongs;"],"sourceRoot":""}